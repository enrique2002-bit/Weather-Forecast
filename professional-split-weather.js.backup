/**
 * Professional Split Weather Dashboard
 * Beautiful Glassmorphism Design with Live Weather Data
 * Using WeatherAPI.com for Split, Croatia
 */

class ProfessionalSplitWeather {
    constructor() {
        this.apiKey = 'ae9c7b511597467cb5e100338250108'; // Working API key
        this.city = 'Split';
        this.country = 'Croatia';
        this.lat = 43.5081;
        this.lon = 16.4402;
        
        this.weatherData = null;
        this.weatherMap = null;
        this.currentMapLayer = 'precipitation';
        
        // Ultimate Weather Symbols - Most Realistic and Complete - Enhanced Version
        this.weatherSymbols = {
            // Clear conditions - Premium sun and moon
            1000: { day: '☀️', night: '🌙', name: 'Clear' },
            
            // Partly cloudy - Beautiful cloud combinations
            1003: { day: '⛅', night: '☁️', name: 'Partly Cloudy' },
            
            // Cloudy conditions - Realistic cloud variations
            1006: { day: '☁️', night: '☁️', name: 'Cloudy' },
            1009: { day: '☁️', night: '☁️', name: 'Overcast' },
            
            // Mist and fog - Atmospheric effects
            1030: { day: '🌫️', night: '🌫️', name: 'Mist' },
            1135: { day: '🌫️', night: '🌫️', name: 'Fog' },
            1147: { day: '🌫️', night: '🌫️', name: 'Freezing Fog' },
            
            // Light rain - Beautiful precipitation
            1063: { day: '🌦️', night: '🌧️', name: 'Patchy Rain' },
            1150: { day: '🌦️', night: '🌧️', name: 'Patchy Light Drizzle' },
            1153: { day: '🌧️', night: '🌧️', name: 'Light Drizzle' },
            1168: { day: '🌧️', night: '🌧️', name: 'Freezing Drizzle' },
            1171: { day: '🌧️', night: '🌧️', name: 'Heavy Freezing Drizzle' },
            1180: { day: '🌦️', night: '🌧️', name: 'Patchy Light Rain' },
            1183: { day: '🌧️', night: '🌧️', name: 'Light Rain' },
            1186: { day: '🌧️', night: '🌧️', name: 'Moderate Rain' },
            1189: { day: '🌧️', night: '🌧️', name: 'Moderate Rain' },
            1192: { day: '🌧️', night: '🌧️', name: 'Heavy Rain' },
            1195: { day: '🌧️', night: '🌧️', name: 'Heavy Rain' },
            1198: { day: '🌧️', night: '🌧️', name: 'Light Freezing Rain' },
            1201: { day: '🌧️', night: '🌧️', name: 'Moderate Freezing Rain' },
            1240: { day: '🌦️', night: '🌧️', name: 'Light Rain Shower' },
            1243: { day: '🌧️', night: '🌧️', name: 'Moderate Rain Shower' },
            1246: { day: '⛈️', night: '⛈️', name: 'Torrential Rain Shower' },
            
            // Snow conditions - Winter wonderland
            1066: { day: '🌨️', night: '🌨️', name: 'Patchy Snow' },
            1069: { day: '🌨️', night: '🌨️', name: 'Patchy Sleet' },
            1072: { day: '🌨️', night: '🌨️', name: 'Patchy Freezing Drizzle' },
            1114: { day: '❄️', night: '❄️', name: 'Blowing Snow' },
            1117: { day: '🌪️', night: '🌪️', name: 'Blizzard' },
            1204: { day: '🌨️', night: '🌨️', name: 'Light Sleet' },
            1207: { day: '🌨️', night: '🌨️', name: 'Moderate Sleet' },
            1210: { day: '🌨️', night: '🌨️', name: 'Patchy Light Snow' },
            1213: { day: '🌨️', night: '🌨️', name: 'Light Snow' },
            1216: { day: '🌨️', night: '🌨️', name: 'Patchy Moderate Snow' },
            1219: { day: '❄️', night: '❄️', name: 'Moderate Snow' },
            1222: { day: '❄️', night: '❄️', name: 'Patchy Heavy Snow' },
            1225: { day: '❄️', night: '❄️', name: 'Heavy Snow' },
            1237: { day: '🧊', night: '🧊', name: 'Ice Pellets' },
            1249: { day: '🌨️', night: '🌨️', name: 'Light Sleet' },
            1252: { day: '🌨️', night: '🌨️', name: 'Moderate Sleet' },
            1255: { day: '🌨️', night: '🌨️', name: 'Light Snow Showers' },
            1258: { day: '❄️', night: '❄️', name: 'Moderate Snow Showers' },
            1261: { day: '🧊', night: '🧊', name: 'Light Ice Pellet Showers' },
            1264: { day: '🧊', night: '🧊', name: 'Moderate Ice Pellet Showers' },
            
            // Thunderstorms - Dramatic weather
            1087: { day: '⛈️', night: '⛈️', name: 'Thundery Outbreaks' },
            1273: { day: '⛈️', night: '⛈️', name: 'Patchy Light Rain with Thunder' },
            1276: { day: '⛈️', night: '⛈️', name: 'Moderate Rain with Thunder' },
            1279: { day: '⛈️', night: '⛈️', name: 'Patchy Light Snow with Thunder' },
            1282: { day: '⛈️', night: '⛈️', name: 'Moderate Snow with Thunder' },
            
            // Default fallback
            default: { day: '🌤️', night: '🌙', name: 'Unknown' }
        };
        
        this.init();
    }

    async init() {
        console.log('🌟 Initializing Professional Split Weather Dashboard');
        
        // Initialize time display
        this.initializeTimeDisplay();
        
        // Initialize weather particles
        this.initializeWeatherParticles();
        
        // Initialize weather map
        this.initializeWeatherMap();
        
        // Initialize map controls
        this.initializeMapControls();
        
        // Fetch weather data
        await this.fetchWeatherData();
        
        // Start update cycles
        this.startUpdateCycles();
        
        console.log('✨ Professional Split Weather Dashboard initialized successfully');
    }

    initializeTimeDisplay() {
        const updateTime = () => {
            const now = new Date();
            
            // Current time
            const timeString = now.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false,
                timeZone: 'Europe/Zagreb'
            });
            
            // Current date
            const dateString = now.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                timeZone: 'Europe/Zagreb'
            });

            // Update all time displays
            const timeElement = document.getElementById('current-time');
            const weatherTimeElement = document.getElementById('current-time-weather');
            const dateElement = document.getElementById('current-date');
            
            if (timeElement) timeElement.textContent = timeString;
            if (weatherTimeElement) weatherTimeElement.textContent = timeString;
            if (dateElement) dateElement.textContent = dateString;
        };

        updateTime();
        setInterval(updateTime, 1000);
    }

    initializeWeatherParticles() {
        const particlesContainer = document.querySelector('.weather-particles');
        
        // Create floating weather particles
        for (let i = 0; i < 30; i++) {
            const particle = document.createElement('div');
            particle.style.cssText = `
                position: absolute;
                width: ${Math.random() * 4 + 1}px;
                height: ${Math.random() * 4 + 1}px;
                background: rgba(255, 255, 255, ${Math.random() * 0.3 + 0.1});
                border-radius: 50%;
                left: ${Math.random() * 100}%;
                top: ${Math.random() * 100}%;
                animation: floatParticle ${Math.random() * 20 + 20}s linear infinite;
                animation-delay: ${Math.random() * 10}s;
            `;
            
            particlesContainer.appendChild(particle);
        }

        // Add CSS animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes floatParticle {
                0% { 
                    transform: translateY(0px) translateX(0px) rotate(0deg); 
                    opacity: 0; 
                }
                10% { opacity: 1; }
                90% { opacity: 1; }
                100% { 
                    transform: translateY(-100vh) translateX(${Math.random() * 100 - 50}px) rotate(360deg); 
                    opacity: 0; 
                }
            }
        `;
        document.head.appendChild(style);
    }

    initializeWeatherMap() {
        // Initialize Leaflet map with enhanced professional settings
        this.weatherMap = L.map('weather-map', {
            center: [this.lat, this.lon],
            zoom: 9,
            zoomControl: true,
            attributionControl: true,
            preferCanvas: true,
            zoomSnap: 0.5,
            zoomDelta: 0.5,
            maxZoom: 18,
            minZoom: 4
        });

        // Enhanced satellite hybrid base layer for better weather visualization
        const satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: '&copy; <a href="https://www.esri.com/">Esri</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
            maxZoom: 19
        });

        // Professional dark theme base layer
        const darkLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 19
        });
        
        // Use the dark theme for better weather layer visibility
        darkLayer.addTo(this.weatherMap);

        // Add enhanced weather layers using OpenWeatherMap
        this.addEnhancedWeatherLayers();

        // Add Split city marker with liquid glass styling
        const splitIcon = L.divIcon({
            className: 'split-marker',
            html: `
                <div style="
                    width: 28px;
                    height: 28px;
                    background: rgba(59, 130, 246, 0.8);
                    border: 3px solid rgba(255, 255, 255, 0.9);
                    border-radius: 50%;
                    box-shadow: 
                        0 0 25px rgba(59, 130, 246, 0.6),
                        inset 0 2px 4px rgba(255, 255, 255, 0.3);
                    position: relative;
                    animation: liquidPulse 3s ease-in-out infinite;
                    backdrop-filter: blur(10px);
                ">
                    <div style="
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        width: 12px;
                        height: 12px;
                        background: linear-gradient(45deg, #ffffff, #f0f9ff);
                        border-radius: 50%;
                        box-shadow: 0 0 8px rgba(255, 255, 255, 0.8);
                    "></div>
                </div>
            `,
            iconSize: [28, 28],
            iconAnchor: [14, 14]
        });

        this.splitMarker = L.marker([this.lat, this.lon], { icon: splitIcon })
            .addTo(this.weatherMap)
            .bindPopup(`
                <div style="
                    color: #1e293b; 
                    font-family: 'Inter', sans-serif; 
                    text-align: center;
                    background: rgba(255, 255, 255, 0.95);
                    backdrop-filter: blur(25px);
                    border-radius: 16px;
                    padding: 20px;
                    border: 1px solid rgba(255, 255, 255, 0.5);
                    box-shadow: 
                        0 8px 32px rgba(0, 0, 0, 0.1),
                        inset 0 1px 0 rgba(255, 255, 255, 0.8);
                    min-width: 220px;
                ">
                    <div style="font-size: 1.3rem; font-weight: 600; margin-bottom: 8px; color: #3b82f6;">
                        <span style="margin-right: 8px;">📍</span>
                        Split, Croatia
                    </div>
                    <div style="opacity: 0.7; margin-bottom: 12px; font-size: 0.9rem; color: #64748b;">
                        43.5081°N, 16.4402°E
                    </div>
                    <div id="popup-weather" style="font-size: 1rem; color: #475569;">
                        Loading weather data...
                    </div>
                </div>
            `);

        // Add CSS animation for liquid pulse effect
        if (!document.getElementById('liquid-animation-style')) {
            const style = document.createElement('style');
            style.id = 'liquid-animation-style';
            style.textContent = `
                @keyframes liquidPulse {
                    0%, 100% { 
                        transform: scale(1); 
                        box-shadow: 
                            0 0 25px rgba(59, 130, 246, 0.6),
                            inset 0 2px 4px rgba(255, 255, 255, 0.3);
                    }
                    50% { 
                        transform: scale(1.15); 
                        box-shadow: 
                            0 0 35px rgba(59, 130, 246, 0.8),
                            inset 0 2px 6px rgba(255, 255, 255, 0.5);
                    }
                }
            `;
            document.head.appendChild(style);
        }

        // Add range circles for context with liquid glass styling
        const circles = [25, 50, 100];
        circles.forEach(radius => {
            L.circle([this.lat, this.lon], {
                radius: radius * 1000, // Convert to meters
                fillOpacity: 0,
                color: 'rgba(59, 130, 246, 0.3)',
                weight: 2,
                dashArray: '5, 10'
            }).addTo(this.weatherMap);
        });

        // Initialize with precipitation layer
        setTimeout(() => {
            this.updatePrecipitationLayer();
        }, 1000);

        console.log('🗺️ Enhanced weather map initialized with professional features');
    }

    addEnhancedWeatherLayers() {
        // Using reliable weather map services
        
        // OpenWeatherMap precipitation layer (works with free tier)
        const precipitationLayer = L.tileLayer('https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=ae9c7b511597467cb5e100338250108', {
            attribution: '&copy; <a href="https://openweathermap.org/">OpenWeatherMap</a>',
            opacity: 0.8,
            zIndex: 10
        });

        // OpenWeatherMap clouds layer
        const cloudsLayer = L.tileLayer('https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png?appid=ae9c7b511597467cb5e100338250108', {
            attribution: '&copy; <a href="https://openweathermap.org/">OpenWeatherMap</a>',
            opacity: 0.6,
            zIndex: 5
        });

        // OpenWeatherMap temperature layer
        const temperatureLayer = L.tileLayer('https://tile.openweathermap.org/map/temp_new/{z}/{x}/{y}.png?appid=ae9c7b511597467cb5e100338250108', {
            attribution: '&copy; <a href="https://openweathermap.org/">OpenWeatherMap</a>',
            opacity: 0.7,
            zIndex: 6
        });

        // OpenWeatherMap wind layer
        const windLayer = L.tileLayer('https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png?appid=ae9c7b511597467cb5e100338250108', {
            attribution: '&copy; <a href="https://openweathermap.org/">OpenWeatherMap</a>',
            opacity: 0.6,
            zIndex: 7
        });

        // OpenWeatherMap pressure layer
        const pressureLayer = L.tileLayer('https://tile.openweathermap.org/map/pressure_new/{z}/{x}/{y}.png?appid=ae9c7b511597467cb5e100338250108', {
            attribution: '&copy; <a href="https://openweathermap.org/">OpenWeatherMap</a>',
            opacity: 0.7,
            zIndex: 8
        });

        // Enhanced weather layers for Split, Croatia region
        const weatherLayers = {
            precipitation: precipitationLayer,
            clouds: cloudsLayer,
            temperature: temperatureLayer,
            wind: windLayer,
            pressure: pressureLayer
        };

        // Store weather layers for later use
        this.weatherLayers = weatherLayers;
        
        // Add default precipitation layer
        precipitationLayer.addTo(this.weatherMap);
        
        console.log('🌧️ Enhanced weather layers initialized with OpenWeatherMap data');
    }

    updatePrecipitationLayer() {
        // Remove existing precipitation layer if exists
        if (this.currentPrecipitationLayer) {
            this.weatherMap.removeLayer(this.currentPrecipitationLayer);
        }
        
        // Add OpenWeatherMap precipitation layer
        this.currentPrecipitationLayer = L.tileLayer('https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=ae9c7b511597467cb5e100338250108', {
            attribution: '&copy; <a href="https://openweathermap.org/">OpenWeatherMap</a>',
            opacity: 0.8,
            zIndex: 10
        });
        
        this.currentPrecipitationLayer.addTo(this.weatherMap);
        
        console.log('🗺️ Precipitation layer updated successfully');
    }

    initializeMapControls() {
        const buttons = document.querySelectorAll('.map-btn');
        
        buttons.forEach(button => {
            button.addEventListener('click', (e) => {
                // Remove active class from all buttons
                buttons.forEach(btn => btn.classList.remove('active'));
                
                // Add active class to clicked button
                e.target.classList.add('active');
                
                // Update map layer
                this.currentMapLayer = e.target.id.replace('-layer', '');
                this.updateMapLayer();
                this.updateMapLegend();
            });
        });

        // Initialize legend
        this.updateMapLegend();
    }

    updateMapLayer() {
        // Remove all current weather layers
        Object.values(this.weatherLayers || {}).forEach(layer => {
            if (this.weatherMap.hasLayer(layer)) {
                this.weatherMap.removeLayer(layer);
            }
        });
        
        // Remove current precipitation layer if exists
        if (this.currentPrecipitationLayer && this.weatherMap.hasLayer(this.currentPrecipitationLayer)) {
            this.weatherMap.removeLayer(this.currentPrecipitationLayer);
        }

        // Add selected layer
        switch (this.currentMapLayer) {
            case 'precipitation':
                this.updatePrecipitationLayer();
                break;
            case 'clouds':
                if (this.weatherLayers.clouds) {
                    this.weatherLayers.clouds.addTo(this.weatherMap);
                }
                break;
            case 'temperature':
                if (this.weatherLayers.temperature) {
                    this.weatherLayers.temperature.addTo(this.weatherMap);
                }
                break;
            case 'wind':
                if (this.weatherLayers.wind) {
                    this.weatherLayers.wind.addTo(this.weatherMap);
                }
                break;
            case 'pressure':
                if (this.weatherLayers.pressure) {
                    this.weatherLayers.pressure.addTo(this.weatherMap);
                }
                break;
            default:
                this.updatePrecipitationLayer();
        }
        
        console.log(`🗺️ Map layer switched to: ${this.currentMapLayer}`);
    }

    updateMapLegend() {
        const legendTitle = document.getElementById('legend-title');
        const legendScale = document.getElementById('legend-scale');
        
        if (!legendTitle || !legendScale) return;

        const legends = {
            precipitation: {
                title: 'Precipitation Intensity',
                items: [
                    { color: 'rgba(0, 255, 0, 0.6)', label: 'Light' },
                    { color: 'rgba(255, 255, 0, 0.8)', label: 'Moderate' },
                    { color: 'rgba(255, 165, 0, 0.9)', label: 'Heavy' },
                    { color: 'rgba(255, 0, 0, 1)', label: 'Intense' }
                ]
            },
            temperature: {
                title: 'Temperature (°C)',
                items: [
                    { color: 'rgba(0, 0, 255, 0.8)', label: '< 0°C' },
                    { color: 'rgba(0, 255, 255, 0.8)', label: '0-10°C' },
                    { color: 'rgba(0, 255, 0, 0.8)', label: '10-20°C' },
                    { color: 'rgba(255, 255, 0, 0.8)', label: '20-30°C' },
                    { color: 'rgba(255, 165, 0, 0.8)', label: '30-40°C' },
                    { color: 'rgba(255, 0, 0, 0.8)', label: '> 40°C' }
                ]
            },
            wind: {
                title: 'Wind Speed (km/h)',
                items: [
                    { color: 'rgba(0, 255, 0, 0.6)', label: '0-10' },
                    { color: 'rgba(255, 255, 0, 0.7)', label: '10-25' },
                    { color: 'rgba(255, 165, 0, 0.8)', label: '25-50' },
                    { color: 'rgba(255, 0, 0, 0.9)', label: '> 50' }
                ]
            },
            clouds: {
                title: 'Cloud Coverage (%)',
                items: [
                    { color: 'rgba(255, 255, 255, 0.2)', label: '0-25%' },
                    { color: 'rgba(200, 200, 200, 0.4)', label: '25-50%' },
                    { color: 'rgba(150, 150, 150, 0.6)', label: '50-75%' },
                    { color: 'rgba(100, 100, 100, 0.8)', label: '75-100%' }
                ]
            },
            pressure: {
                title: 'Atmospheric Pressure (hPa)',
                items: [
                    { color: 'rgba(255, 0, 255, 0.6)', label: '< 1000' },
                    { color: 'rgba(0, 0, 255, 0.7)', label: '1000-1010' },
                    { color: 'rgba(0, 255, 0, 0.7)', label: '1010-1020' },
                    { color: 'rgba(255, 255, 0, 0.7)', label: '1020-1030' },
                    { color: 'rgba(255, 0, 0, 0.8)', label: '> 1030' }
                ]
            }
        };

        const currentLegend = legends[this.currentMapLayer] || legends.precipitation;
        
        legendTitle.textContent = currentLegend.title;
        legendScale.innerHTML = '';
        
        currentLegend.items.forEach(item => {
            const legendItem = document.createElement('div');
            legendItem.className = 'legend-item';
            legendItem.innerHTML = `
                <div class="legend-color" style="background: ${item.color};"></div>
                <span>${item.label}</span>
            `;
            legendScale.appendChild(legendItem);
        });
    }

    async updateMapLayer() {
        // Remove existing weather layers
        this.weatherMap.eachLayer(layer => {
            if (layer.options && layer.options.zoomEarthLayer) {
                this.weatherMap.removeLayer(layer);
            }
        });

        // Add enhanced weather layer based on current selection
        if (this.weatherLayers && this.weatherLayers[this.currentMapLayer]) {
            this.weatherLayers[this.currentMapLayer].addTo(this.weatherMap);
        } else {
            // Fallback to alternative weather visualization
            this.addAlternativeWeatherLayer();
        }

        // Update legend
        this.updateMapLegend();
    }

    addAlternativeWeatherLayer() {
        // Enhanced weather visualization using Windy.com tiles (more reliable)
        const windyLayers = {
            precipitation: 'https://tile.windy.com/v9.3/precipitation/{z}/{x}/{y}.png',
            temperature: 'https://tile.windy.com/v9.3/temperature/{z}/{x}/{y}.png',
            wind: 'https://tile.windy.com/v9.3/wind/{z}/{x}/{y}.png',
            clouds: 'https://tile.windy.com/v9.3/clouds/{z}/{x}/{y}.png',
            pressure: 'https://tile.windy.com/v9.3/pressure/{z}/{x}/{y}.png'
        };

        const layerUrl = windyLayers[this.currentMapLayer];
        
        if (layerUrl) {
            const weatherLayer = L.tileLayer(layerUrl, {
                attribution: '&copy; <a href="https://windy.com/">Windy.com</a>',
                opacity: 0.7,
                zoomEarthLayer: true,
                layerName: this.currentMapLayer
            });
            
            weatherLayer.addTo(this.weatherMap);
        }
    }

    addProfessionalWeatherLayer() {
        // Add professional weather overlay using multiple sources
        switch (this.currentMapLayer) {
            case 'precipitation':
                // Professional precipitation radar using RainViewer
                this.addRainViewerLayer();
                break;
            case 'temperature':
                // Professional temperature visualization
                this.addOpenWeatherLayer('temp_new');
                break;
            case 'wind':
                // Professional wind visualization  
                this.addOpenWeatherLayer('wind_new');
                break;
            case 'clouds':
                // Professional cloud coverage
                this.addOpenWeatherLayer('clouds_new');
                break;
            case 'pressure':
                // Professional pressure visualization
                this.addOpenWeatherLayer('pressure_new');
                break;
        }
    }

    async addRainViewerLayer() {
        try {
            // Get current radar timestamps from RainViewer API
            const response = await fetch('https://api.rainviewer.com/public/weather-maps.json');
            
            if (!response.ok) {
                throw new Error(`RainViewer API error: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (data.radar && data.radar.nowcast && data.radar.nowcast.length > 0) {
                const latestTime = data.radar.nowcast[data.radar.nowcast.length - 1].time;
                const radarUrl = `https://tilecache.rainviewer.com/v2/radar/${latestTime}/256/{z}/{x}/{y}/8/1_1.png`;
                
                const weatherLayer = L.tileLayer(radarUrl, {
                    attribution: 'Precipitation data © RainViewer',
                    opacity: 0.7,
                    maxZoom: 19,
                    zoomEarthLayer: true,
                    crossOrigin: true
                });
                
                weatherLayer.on('tileerror', function(error) {
                    console.log('RainViewer tile error:', error);
                });
                
                weatherLayer.addTo(this.weatherMap);
                console.log('🌧️ Professional precipitation radar loaded from RainViewer');
                
                // Force map refresh
                setTimeout(() => {
                    this.weatherMap.invalidateSize();
                }, 100);
            } else {
                throw new Error('No radar data available');
            }
        } catch (error) {
            console.error('Error loading RainViewer data:', error);
            // Fallback to OpenWeatherMap precipitation
            console.log('🔄 Falling back to OpenWeatherMap precipitation layer');
            this.addOpenWeatherLayer('precipitation_new');
        }
    }

    addOpenWeatherLayer(layerType) {
        // Use working OpenWeatherMap layers with proper API key
        const owmApiKey = 'b6907d289e10d714a6e88b30761fae22';
        const layerUrl = `https://tile.openweathermap.org/map/${layerType}/{z}/{x}/{y}.png?appid=${owmApiKey}`;
        
        let opacity = 0.6;
        let layerName = layerType;
        
        // Adjust opacity and naming for different layer types
        switch (layerType) {
            case 'temp_new':
                opacity = 0.7;
                layerName = 'temperature';
                break;
            case 'wind_new':
                opacity = 0.6;
                layerName = 'wind';
                break;
            case 'clouds_new':
                opacity = 0.5;
                layerName = 'clouds';
                break;
            case 'pressure_new':
                opacity = 0.6;
                layerName = 'pressure';
                break;
            case 'precipitation_new':
                opacity = 0.7;
                layerName = 'precipitation';
                break;
        }
        
        const weatherLayer = L.tileLayer(layerUrl, {
            attribution: 'Weather data © OpenWeatherMap',
            opacity: opacity,
            maxZoom: 19,
            zoomEarthLayer: true,
            crossOrigin: true
        });
        
        weatherLayer.on('tileerror', function(error) {
            console.log('Tile loading error:', error);
        });
        
        weatherLayer.addTo(this.weatherMap);
        console.log(`🌡️ Professional ${layerName} layer loaded from OpenWeatherMap`);
        
        // Force map refresh
        setTimeout(() => {
            this.weatherMap.invalidateSize();
        }, 100);
    }

    addFallbackWeatherLayer() {
        // Fallback professional weather visualization
        const layerUrl = 'https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=b6907d289e10d714a6e88b30761fae22';
        
        const weatherLayer = L.tileLayer(layerUrl, {
            attribution: 'Weather data © OpenWeatherMap',
            opacity: 0.6,
            maxZoom: 19,
            zoomEarthLayer: true
        });
        
        weatherLayer.addTo(this.weatherMap);
        console.log('🔄 Fallback weather layer loaded');
    }

    async fetchWeatherData() {
        try {
            this.updateApiStatus('Fetching data...', 'loading');
            
            const url = `https://api.weatherapi.com/v1/forecast.json?key=${this.apiKey}&q=${this.lat},${this.lon}&days=7&aqi=yes&alerts=yes`;
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            this.weatherData = data;
            
            this.updateWeatherDisplay(data);
            this.updateApiStatus('Live Data', 'online');
            
            console.log('✅ Weather data fetched successfully');
            
        } catch (error) {
            console.error('❌ Error fetching weather data:', error);
            this.useFallbackData();
            this.updateApiStatus('Offline Data', 'offline');
        }
    }

    useFallbackData() {
        const fallbackData = {
            current: {
                temp_c: 25,
                condition: { 
                    text: 'Partly Cloudy', 
                    icon: '//cdn.weatherapi.com/weather/64x64/day/116.png',
                    code: 1003
                },
                feelslike_c: 27,
                humidity: 65,
                wind_kph: 12,
                wind_dir: 'NW',
                pressure_mb: 1013,
                vis_km: 10,
                uv: 6,
                cloud: 30,
                dewpoint_c: 18
            },
            forecast: {
                forecastday: [
                    {
                        date: '2025-08-01',
                        day: { 
                            maxtemp_c: 28, 
                            mintemp_c: 20, 
                            condition: { 
                                text: 'Partly Cloudy', 
                                icon: '//cdn.weatherapi.com/weather/64x64/day/116.png' 
                            } 
                        },
                        astro: { 
                            sunrise: '06:05', 
                            sunset: '20:25',
                            moon_phase: 'Waning Crescent'
                        },
                        hour: Array.from({length: 24}, (_, i) => ({
                            time: `2025-08-01 ${i.toString().padStart(2, '0')}:00`,
                            temp_c: 20 + Math.sin(i * Math.PI / 12) * 8,
                            condition: { 
                                text: 'Clear', 
                                icon: i > 6 && i < 19 ? '//cdn.weatherapi.com/weather/64x64/day/113.png' : '//cdn.weatherapi.com/weather/64x64/night/113.png'
                            },
                            wind_kph: 10 + Math.random() * 10,
                            humidity: 60 + Math.random() * 20,
                            chance_of_rain: Math.random() * 30
                        }))
                    },
                    ...Array.from({length: 6}, (_, i) => ({
                        date: new Date(Date.now() + (i + 2) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                        day: { 
                            maxtemp_c: 25 + Math.random() * 8, 
                            mintemp_c: 18 + Math.random() * 6, 
                            condition: { 
                                text: ['Sunny', 'Partly Cloudy', 'Cloudy'][Math.floor(Math.random() * 3)], 
                                icon: '//cdn.weatherapi.com/weather/64x64/day/113.png' 
                            } 
                        }
                    }))
                ]
            }
        };

        this.weatherData = fallbackData;
        this.updateWeatherDisplay(fallbackData);
    }

    updateWeatherDisplay(data) {
        const current = data.current;
        
        // Update main weather display
        document.getElementById('main-temperature').textContent = Math.round(current.temp_c);
        document.getElementById('high-temp').textContent = `${Math.round(data.forecast.forecastday[0].day.maxtemp_c)}°C`;
        document.getElementById('low-temp').textContent = `${Math.round(data.forecast.forecastday[0].day.mintemp_c)}°C`;
        
        // Update feels like temperature
        const feelsLikeValue = document.getElementById('feels-like-value');
        if (feelsLikeValue) {
            feelsLikeValue.textContent = `${Math.round(current.feelslike_c)}°C`;
        }
        
        // Update weather icon with enhanced effects
        this.updateWeatherIcon(current.condition.code, current.is_day);
        
        // Update detailed weather info
        document.getElementById('wind-speed').textContent = `${Math.round(current.wind_kph)} km/h`;
        document.getElementById('wind-direction').textContent = current.wind_dir;
        document.getElementById('humidity').textContent = `${current.humidity}%`;
        document.getElementById('visibility').textContent = `${current.vis_km} km`;
        document.getElementById('pressure').textContent = `${Math.round(current.pressure_mb)} mb`;
        document.getElementById('uv-index').textContent = current.uv;
        document.getElementById('uv-description').textContent = this.getUVDescription(current.uv);
        document.getElementById('cloud-cover').textContent = `${current.cloud}%`;
        
        // Update additional info
        if (data.forecast.forecastday[0].astro) {
            document.getElementById('sunrise').textContent = data.forecast.forecastday[0].astro.sunrise;
            document.getElementById('sunset').textContent = data.forecast.forecastday[0].astro.sunset;
            document.getElementById('moon-phase').textContent = data.forecast.forecastday[0].astro.moon_phase;
        }
        document.getElementById('dewpoint').textContent = `${Math.round(current.dewpoint_c || 15)}°C`;
        
        // Update forecasts
        this.updateHourlyForecast(data.forecast.forecastday[0].hour);
        this.updateDailyForecast(data.forecast.forecastday);
        
        // Update map popup
        this.updateMapPopup(current);
        
        // Update background based on weather
        this.updateWeatherBackground(current.condition.text);
    }

    updateWeatherIcon(conditionCode, isDay) {
        // Redirect to the enhanced weather icon update function
        this.updateEnhancedWeatherIcon(conditionCode, isDay);
    }

    addWeatherParticles(overlay, conditionCode, isDay) {
        // Clear existing particles
        overlay.innerHTML = '';
        
        // Add weather-specific particle effects
        if ([1063, 1150, 1153, 1180, 1183, 1186, 1189, 1192, 1195, 1240, 1243, 1246].includes(conditionCode)) {
            // Rain particles
            for (let i = 0; i < 6; i++) {
                const drop = document.createElement('div');
                drop.style.cssText = `
                    position: absolute;
                    width: 2px;
                    height: 10px;
                    background: linear-gradient(to bottom, transparent, #3b82f6);
                    border-radius: 1px;
                    left: ${20 + Math.random() * 60}%;
                    top: ${10 + Math.random() * 20}%;
                    animation: rainDrop ${1.5 + Math.random() * 0.5}s ease-in infinite;
                    animation-delay: ${Math.random() * 2}s;
                `;
                overlay.appendChild(drop);
            }
        } else if ([1066, 1069, 1114, 1117, 1210, 1213, 1216, 1219, 1222, 1225, 1255, 1258].includes(conditionCode)) {
            // Snow particles
            for (let i = 0; i < 8; i++) {
                const flake = document.createElement('div');
                flake.style.cssText = `
                    position: absolute;
                    width: 4px;
                    height: 4px;
                    background: #f8fafc;
                    border-radius: 50%;
                    left: ${15 + Math.random() * 70}%;
                    top: ${5 + Math.random() * 30}%;
                    animation: snowFall ${2 + Math.random() * 1.5}s ease-out infinite;
                    animation-delay: ${Math.random() * 3}s;
                    box-shadow: 0 0 4px rgba(248, 250, 252, 0.8);
                `;
                overlay.appendChild(flake);
            }
        } else if ([1087, 1273, 1276, 1279, 1282].includes(conditionCode)) {
            // Lightning effect
            const lightning = document.createElement('div');
            lightning.style.cssText = `
                position: absolute;
                width: 100%;
                height: 100%;
                background: radial-gradient(circle, rgba(251, 191, 36, 0.3) 0%, transparent 70%);
                animation: lightning 3s ease-in-out infinite;
                animation-delay: ${Math.random() * 4}s;
            `;
            overlay.appendChild(lightning);
        }
        
        // Add CSS animations if not already present
        if (!document.getElementById('weather-particles-style')) {
            const style = document.createElement('style');
            style.id = 'weather-particles-style';
            style.textContent = `
                @keyframes rainDrop {
                    0% { transform: translateY(-10px) scaleY(0.8); opacity: 0; }
                    10% { opacity: 0.7; }
                    90% { opacity: 0.7; }
                    100% { transform: translateY(100px) scaleY(1.2); opacity: 0; }
                }
                @keyframes snowFall {
                    0% { transform: translateY(-10px) rotate(0deg) scale(0.8); opacity: 0; }
                    10% { opacity: 0.8; }
                    90% { opacity: 0.8; }
                    100% { transform: translateY(100px) rotate(360deg) scale(1.2); opacity: 0; }
                }
                @keyframes lightning {
                    0%, 85%, 100% { opacity: 0; }
                    88%, 92% { opacity: 1; }
                }
            `;
            document.head.appendChild(style);
        }
    }

    getWeatherIconClass(code, isDay = true) {
        // Ultra-realistic weather icon mapping with precise weather conditions
        const iconMap = {
            // Clear sky - most realistic sunny/clear icons
            1000: isDay ? 'wi wi-day-sunny' : 'wi wi-night-clear',
            
            // Partly cloudy - realistic cloud coverage variations
            1003: isDay ? 'wi wi-day-cloudy' : 'wi wi-night-alt-cloudy',
            
            // Cloudy conditions - varied realistic cloud types
            1006: 'wi wi-cloudy',
            1009: 'wi wi-cloud',
            
            // Mist, fog and overcast - atmospheric conditions
            1030: 'wi wi-fog',
            1135: isDay ? 'wi wi-day-fog' : 'wi wi-night-fog',
            1147: 'wi wi-fog',
            
            // Light rain and drizzle - realistic precipitation
            1063: isDay ? 'wi wi-day-sprinkle' : 'wi wi-night-alt-sprinkle',
            1150: 'wi wi-sprinkle',
            1153: 'wi wi-sprinkle',
            1168: 'wi wi-rain-mix',
            1171: 'wi wi-rain-mix',
            1180: isDay ? 'wi wi-day-rain-mix' : 'wi wi-night-alt-rain-mix',
            1183: 'wi wi-rain',
            
            // Moderate to heavy rain - realistic rain intensity levels
            1186: 'wi wi-rain',
            1189: 'wi wi-rain',
            1192: 'wi wi-rain',
            1195: 'wi wi-rain',
            1198: 'wi wi-rain-wind',
            1201: 'wi wi-rain-wind',
            1240: isDay ? 'wi wi-day-showers' : 'wi wi-night-alt-showers',
            1243: 'wi wi-showers',
            1246: 'wi wi-showers',
            
            // Snow conditions - realistic snow types and intensities
            1066: isDay ? 'wi wi-day-snow' : 'wi wi-night-alt-snow',
            1069: 'wi wi-sleet',
            1072: 'wi wi-sleet',
            1114: 'wi wi-snow',
            1117: 'wi wi-snow-wind',
            1204: 'wi wi-sleet',
            1207: 'wi wi-sleet',
            1210: isDay ? 'wi wi-day-snow' : 'wi wi-night-alt-snow',
            1213: 'wi wi-snow',
            1216: 'wi wi-snow',
            1219: 'wi wi-snow',
            1222: 'wi wi-snow',
            1225: 'wi wi-snow-wind',
            1237: 'wi wi-hail',
            1249: 'wi wi-rain-mix',
            1252: 'wi wi-rain-mix',
            1255: 'wi wi-snow',
            1258: 'wi wi-snow',
            1261: 'wi wi-hail',
            1264: 'wi wi-hail',
            
            // Thunderstorms - realistic storm conditions
            1087: isDay ? 'wi wi-day-thunderstorm' : 'wi wi-night-alt-thunderstorm',
            1273: isDay ? 'wi wi-day-storm-showers' : 'wi wi-night-alt-storm-showers',
            1276: 'wi wi-thunderstorm',
            1279: isDay ? 'wi wi-day-snow-thunderstorm' : 'wi wi-night-alt-snow-thunderstorm',
            1282: 'wi wi-thunderstorm'
        };
        
        const iconClass = iconMap[code] || (isDay ? 'wi wi-day-sunny' : 'wi wi-night-clear');
        console.log(`🌤️ Realistic weather icon: ${code} -> ${iconClass} (${isDay ? 'day' : 'night'})`);
        return iconClass;
    }

    getUVDescription(uv) {
        if (uv <= 2) return 'Low';
        if (uv <= 5) return 'Moderate';
        if (uv <= 7) return 'High';
        if (uv <= 10) return 'Very High';
        return 'Extreme';
    }

    updateHourlyForecast(hourlyData) {
        const container = document.getElementById('hourly-forecast');
        container.innerHTML = '';
        
        // Show ALL 24 hours with weather symbols
        hourlyData.forEach((hour, index) => {
            const time = new Date(hour.time);
            const hourElement = document.createElement('div');
            hourElement.className = 'hourly-item';
            
            // Get realistic weather symbol - ensure it always has a fallback
            const isDay = time.getHours() > 6 && time.getHours() < 20;
            const conditionCode = hour.condition?.code || 1000;
            const weatherSymbol = this.getRealisticWeatherSymbol(conditionCode, isDay);
            
            // Format time properly
            const hourString = time.getHours().toString().padStart(2, '0');
            
            hourElement.innerHTML = `
                <div class="hourly-time">${hourString}:00</div>
                <div class="hourly-weather-icon">${weatherSymbol}</div>
                <div class="hourly-temp">${Math.round(hour.temp_c)}°</div>
            `;
            
            container.appendChild(hourElement);
        });
        
        console.log(`✅ Updated hourly forecast with ${hourlyData.length} hours, all with weather symbols`);
    }

    updateDailyForecast(dailyData) {
        const container = document.getElementById('daily-forecast');
        container.innerHTML = '';
        
        dailyData.slice(1, 8).forEach(day => {
            const date = new Date(day.date);
            const dayElement = document.createElement('div');
            dayElement.className = 'daily-item';
            
            const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });
            
            // Get realistic weather symbol
            const weatherSymbol = this.getRealisticWeatherSymbol(day.day.condition.code || 1000, true);
            
            dayElement.innerHTML = `
                <div class="daily-day">${dayName}</div>
                <div class="daily-weather-icon">${weatherSymbol}</div>
                <div class="daily-high-low">
                    <span class="daily-high">${Math.round(day.day.maxtemp_c)}°</span>
                    <span class="daily-low">${Math.round(day.day.mintemp_c)}°</span>
                </div>
                <div class="daily-condition">${day.day.condition.text}</div>
            `;
            
            container.appendChild(dayElement);
        });
    }

    // Ultimate realistic weather symbols with premium design and live API integration - Enhanced
    getRealisticWeatherSymbol(code, isDay) {
        // Use our comprehensive weather symbols mapping first
        const weatherInfo = this.weatherSymbols[code];
        if (weatherInfo) {
            return isDay ? weatherInfo.day : weatherInfo.night;
        }
        
        // Enhanced fallback with the most beautiful symbols
        const enhancedFallbackSymbols = {
            // Clear/Sunny - Most beautiful sun/moon symbols
            1000: isDay ? '☀️' : '🌙',
            
            // Partly cloudy - Perfect combinations
            1003: isDay ? '⛅' : '☁️',
            1006: '☁️',
            1009: '☁️',
            
            // Weather variations - Premium symbols
            1030: '🌫️', // Mist
            1135: '🌫️', // Fog
            1147: '🌫️', // Freezing fog
            
            // Precipitation - Beautiful rain/snow
            1063: '🌦️', 1150: '🌦️', 1153: '🌧️', 1168: '🌧️', 1171: '🌧️',
            1180: '🌦️', 1183: '🌧️', 1186: '🌧️', 1189: '🌧️', 1192: '🌧️',
            1195: '🌧️', 1198: '🌧️', 1201: '🌧️', 1240: '🌦️', 1243: '🌧️', 1246: '⛈️',
            
            // Snow conditions - Winter beauty
            1066: '🌨️', 1069: '🌨️', 1072: '🌨️', 1114: '❄️', 1117: '🌪️',
            1204: '🌨️', 1207: '🌨️', 1210: '🌨️', 1213: '🌨️', 1216: '🌨️',
            1219: '❄️', 1222: '❄️', 1225: '❄️', 1237: '🧊', 1249: '🌨️',
            1252: '🌨️', 1255: '🌨️', 1258: '❄️', 1261: '🧊', 1264: '🧊',
            
            // Thunderstorms - Dramatic weather
            1087: '⛈️', 1273: '⛈️', 1276: '⛈️', 1279: '⛈️', 1282: '⛈️'
        };
        
        // Return enhanced symbol or default
        return enhancedFallbackSymbols[code] || (isDay ? '☀️' : '🌙');
    }

    // Enhanced weather icon update with premium symbols
            // Clear/Sunny - Premium sun/moon symbols
            1000: isDay ? '🔆' : '�',
            
            // Partly cloudy - Realistic cloud combinations
            1003: isDay ? '⛅' : '�',
            1006: '�️',
            1009: '☁️',
            
            // Overcast and atmospheric conditions
            1030: '�', // Mist
            1135: '�', // Fog
            1147: '🌫️', // Freezing fog
            
            // Light precipitation - Beautiful rain symbols
            1063: '🌦️', // Patchy light rain
            1150: '💧', // Light drizzle
            1153: '�️', // Light drizzle
            1168: '🧊', // Freezing drizzle
            1171: '�️', // Heavy freezing drizzle
            1180: '�️', // Light rain
            1183: '🌧️', // Moderate rain at times
            
            // Moderate to heavy rain - Intense weather symbols
            1186: '🌧️', // Moderate rain
            1189: '🌧️', // Heavy rain at times
            1192: '🌧️', // Heavy rain
            1195: '⚡', // Very heavy rain
            1198: '🧊', // Light freezing rain
            1201: '�️', // Moderate/heavy freezing rain
            
            // Thunderstorms - Dramatic storm symbols
            1087: '⚡', // Thundery outbreaks
            1273: '⚡', // Light rain with thunder
            1276: '⚡', // Moderate/heavy rain with thunder
            1279: '⛈️', // Light snow with thunder
            1282: '⛈️', // Moderate/heavy snow with thunder
            
            // Snow conditions - Beautiful winter symbols
            1066: '🌨️', // Patchy light snow
            1069: '🌨️', // Patchy sleet
            1072: '🌨️', // Patchy freezing drizzle
            1114: '❄️', // Blowing snow
            1117: '❄️', // Blizzard
            1210: '🌨️', // Light sleet
            1213: '🌨️', // Light snow
            1216: '❄️', // Moderate snow
            1219: '❄️', // Heavy snow
            1222: '❄️', // Patchy heavy snow
            1225: '❄️', // Heavy snow
            1237: '🌨️', // Ice pellets
            1249: '🌨️', // Light sleet showers
            1252: '🌨️', // Moderate/heavy sleet
            1255: '❄️', // Light snow showers
            1258: '❄️', // Moderate/heavy snow showers
            1261: '🌨️', // Light ice pellet showers
            1264: '🌨️', // Moderate/heavy ice pellets
            
            // Mixed conditions
            1204: '🌨️', // Light sleet
            1207: '🌨️', // Moderate/heavy sleet
            
            // Special conditions
            1240: '💧', // Light rain shower
            1243: '�️', // Moderate/heavy rain shower
            1246: '⛈️', // Torrential rain shower
        };
        
        return premiumSymbols[code] || (isDay ? '🌞' : '�');
    }

    // Enhanced weather icon update with premium symbols
    updateEnhancedWeatherIcon(conditionCode, isDay) {
        const iconElement = document.getElementById('main-weather-icon');
        if (!iconElement) return;
        
        // Get premium weather symbol
        const weatherSymbol = this.getRealisticWeatherSymbol(conditionCode, isDay);
        
        // Clear existing content and add premium symbol
        iconElement.innerHTML = '';
        iconElement.textContent = weatherSymbol;
        
        // Add premium styling classes based on weather type - updated for new structure
        iconElement.className = 'weather-icon-standalone premium-weather-symbol';
        
        // Add specific styling based on weather condition with new symbols
        if (conditionCode === 1000) {
            iconElement.classList.add(isDay ? 'sunny-day' : 'clear-night');
        } else if ([1003, 1006, 1009].includes(conditionCode)) {
            iconElement.classList.add('cloudy-weather');
        } else if ([1150, 1240].includes(conditionCode)) {
            iconElement.classList.add('water-drop-animation'); // For 💧 symbols
        } else if ([1063, 1153, 1180, 1183, 1186, 1189, 1192, 1243].includes(conditionCode)) {
            iconElement.classList.add('rainy-weather');
        } else if ([1087, 1195, 1273, 1276, 1246].includes(conditionCode)) {
            iconElement.classList.add('stormy-weather'); // For ⚡ symbols
        } else if ([1066, 1069, 1114, 1117, 1210, 1213, 1216, 1219, 1222, 1225, 1255, 1258].includes(conditionCode)) {
            iconElement.classList.add('snowy-weather');
        } else if ([1168, 1171, 1198, 1201, 1237, 1261, 1264].includes(conditionCode)) {
            iconElement.classList.add('ice-crystal-animation'); // For 🧊 symbols
        } else if ([1030].includes(conditionCode)) {
            iconElement.classList.add('ocean-wave-animation'); // For 🌊 symbol
        } else if ([1135, 1147].includes(conditionCode)) {
            iconElement.classList.add('foggy-weather');
        }
        
        // Add premium glow effect
        iconElement.style.textShadow = this.getPremiumGlowEffect(conditionCode, isDay);
    }

    // Premium glow effects for different weather conditions
    getPremiumGlowEffect(conditionCode, isDay) {
        const glowEffects = {
            // Sunny/Clear - Golden glow
            1000: isDay ? '0 0 20px rgba(255, 215, 0, 0.6), 0 0 40px rgba(255, 215, 0, 0.4), 0 0 60px rgba(255, 215, 0, 0.2)' 
                        : '0 0 20px rgba(220, 220, 255, 0.6), 0 0 40px rgba(220, 220, 255, 0.4)',
            
            // Cloudy - Soft white glow
            1003: '0 0 15px rgba(200, 200, 200, 0.5), 0 0 30px rgba(200, 200, 200, 0.3)',
            1006: '0 0 12px rgba(180, 180, 180, 0.4), 0 0 24px rgba(180, 180, 180, 0.2)',
            1009: '0 0 10px rgba(160, 160, 160, 0.3), 0 0 20px rgba(160, 160, 160, 0.1)',
            
            // Rainy - Blue glow
            1063: '0 0 15px rgba(100, 150, 255, 0.5), 0 0 30px rgba(100, 150, 255, 0.3)',
            1186: '0 0 15px rgba(70, 130, 255, 0.6), 0 0 30px rgba(70, 130, 255, 0.4)',
            1189: '0 0 20px rgba(50, 110, 255, 0.7), 0 0 40px rgba(50, 110, 255, 0.5)',
            
            // Stormy - Electric glow
            1087: '0 0 25px rgba(255, 255, 100, 0.8), 0 0 50px rgba(255, 255, 100, 0.6), 0 0 75px rgba(255, 255, 100, 0.4)',
            1276: '0 0 30px rgba(255, 255, 80, 0.9), 0 0 60px rgba(255, 255, 80, 0.7)',
            
            // Snowy - Ice blue glow
            1066: '0 0 15px rgba(200, 220, 255, 0.6), 0 0 30px rgba(200, 220, 255, 0.4)',
            1225: '0 0 20px rgba(180, 200, 255, 0.7), 0 0 40px rgba(180, 200, 255, 0.5)',
            
            // Foggy - Soft gray glow
            1030: '0 0 20px rgba(190, 190, 190, 0.5), 0 0 40px rgba(190, 190, 190, 0.3)',
            1135: '0 0 15px rgba(170, 170, 170, 0.4), 0 0 30px rgba(170, 170, 170, 0.2)'
        };
        
        return glowEffects[conditionCode] || '0 0 10px rgba(255, 255, 255, 0.3), 0 0 20px rgba(255, 255, 255, 0.1)';
    }

    updateMapPopup(current) {
        const popupElement = document.getElementById('popup-weather');
        if (popupElement) {
            popupElement.innerHTML = `
                <strong>${Math.round(current.temp_c)}°C</strong> • ${current.condition.text}<br>
                <small>Feels like ${Math.round(current.feelslike_c)}°C</small>
            `;
        }
    }

    updateWeatherBackground(condition) {
        const body = document.body;
        const conditionLower = condition.toLowerCase();
        
        if (conditionLower.includes('rain') || conditionLower.includes('drizzle')) {
            body.style.background = 'linear-gradient(135deg, #0f1419 0%, #1a2332 50%, #243447 100%)';
        } else if (conditionLower.includes('snow')) {
            body.style.background = 'linear-gradient(135deg, #1a1a2e 0%, #2d3748 50%, #4a5568 100%)';
        } else if (conditionLower.includes('cloud')) {
            body.style.background = 'linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #2d3748 100%)';
        } else if (conditionLower.includes('thunder')) {
            body.style.background = 'linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #2d1b4e 100%)';
        } else {
            // Clear/sunny
            body.style.background = 'linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%)';
        }
    }

    updateApiStatus(status, type) {
        const statusElement = document.getElementById('api-status');
        const dot = statusElement.querySelector('.status-dot');
        const text = statusElement.querySelector('span');
        
        text.textContent = status;
        
        switch (type) {
            case 'online':
                dot.style.background = '#4caf50';
                dot.style.boxShadow = '0 0 10px #4caf50';
                break;
            case 'loading':
                dot.style.background = '#ff9800';
                dot.style.boxShadow = '0 0 10px #ff9800';
                break;
            case 'offline':
                dot.style.background = '#f44336';
                dot.style.boxShadow = '0 0 10px #f44336';
                break;
        }
    }

    startUpdateCycles() {
        // Update weather data every 15 minutes
        setInterval(() => {
            console.log('🔄 Scheduled weather update for Split, Croatia');
            this.fetchWeatherData();
        }, 15 * 60 * 1000);
        
        // Update map popup every 30 seconds
        setInterval(() => {
            if (this.weatherData) {
                this.updateMapPopup(this.weatherData.current);
            }
        }, 30 * 1000);
    }
}

// Initialize Professional Split Weather Dashboard
document.addEventListener('DOMContentLoaded', () => {
    new ProfessionalSplitWeather();
});

// Handle window resize for map
window.addEventListener('resize', () => {
    setTimeout(() => {
        const weatherMap = document.querySelector('.weather-map');
        if (weatherMap && window.splitWeather && window.splitWeather.weatherMap) {
            window.splitWeather.weatherMap.invalidateSize();
        }
    }, 250);
});
